/** NOTE: 자동완성 단어 커스마이징 설정
 * 탭 멈춤 위치 지정: $1, $2, ...
 * 플레이스 홀더: ${1:label}, ${2:another}, ...
 * 마지막 커서 멈춤 위치: $0
 * 
 * 예시:
 * "console 표기명": {
 *     "prefix"     : "자동완성 단어",
 *     "description": "console 표기 설명"
 *     "body"       : [
 *         "console.log('$1');",
 *         "$2"
 *     ],
 * }
*/
{
    "Jest basic unit test code": {
        "prefix"     : "jest",
        "description": "Jest 기본 테스트 코드 템플릿",
        "body"       : [
            "/** NOTE: 단위 테스트 파일",
            "* - 테스트 할 함수, 컴포넌트는 export 로 선언되어 외부에서 접근할 수 있어야 한다",
            "* - 터미널에서 package.json 에 명시한 테스트 실행 명령어 입력 시 테스트가 실행된다",
            "* ",
            "* 테스트 전역 함수",
            "* [참고] https://jestjs.io/docs/api",
            "* - describe('테스트 그룹명', 함수) : 테스트 함수들 그룹핑",
            "* - test('테스트 명', 함수, 타임아웃): 테스트 함수. 타임아웃의 기본 값은 5초 이다",
            "* - afterAll(함수, 타임아웃)        : 그룹 내 모든 테스트 함수들 시작 전 실행되는 함수",
            "* - afterEach(함수, 타임아웃)       : 그룹 내 각각의 테스트 함수 시작 전 실행되는 함수",
            "* - beforeAll(함수, 타임아웃)       : 그룹 내 모든 테스트 함수들 종료 후 실행되는 함수",
            "* - beforeEach(함수, 타임아웃)      : 그룹 내 각각의 테스트 함수 종료 후 실행되는 함수",
            "* ",
            "* 테스트 예상 함수",
            "* [참고] https://jestjs.io/docs/expect",
            "* - expect(입력 값)",
            "* - 수정자",
            "*      - .not",
            "*      - .resolves: Promise 객체의 resolve 결과",
            "*      - .reject  : Promise 객체가 reject 결과",
            "* - 매처(결과)",
            "*      - .toBe(기대 값)    : 원시형 데이터의 동일 여부 비교",
            "*      - .toEqual(기대 값) : 참조형 데이터의 동일 여부 비교",
            "* ",
            "* 테스트 목업 함수",
            "* [참고] https://jestjs.io/docs/jest-object",
            "* [참고] https://jestjs.io/docs/mock-function-api",
            "* - jest.fn(목업함수)             : 신규 목업 함수를 생성하여 반환한다",
            "* - jest.spyOn(파일명, 함수명)    : 특정 파일의 함수를 복사해 Jest 목업 함수로 반환한다",
            "* - 목업함수.mockReturnValue(값)  : 목업함수 결과값을 대체한다",
            "* - 목업함수.mockResolvedValue(값): 비동기 목업함수 resolve 결과값을 대체한다",
            "* - 목업함수.mockRejectedValue(값): 비동기 목업함수 reject 결과값을 대체한다",
            "*/",
            "import ${1:테스트대상} from '~/$2'",
            "",
            "describe('$2', () => {",
            "    beforeAll (() => {})",
            "    afterAll  (() => {})",
            "",
            "    beforeEach(() => {})",
            "    afterEach (() => {})",
            "    ",
            "    test('${3:테스트명}', () => {",
            "    })",
            "})",
        ],
    },
    "Jest Component unit test code": {
        "prefix"     : "jestcom",
        "description": "Jest 컴포넌트 테스트 코드 템플릿",
        "body"       : [
            "/** NOTE: 컴포넌트 테스트 파일",
            " * [참고] https://test-utils.vuejs.org/api/",
            " * ",
            " * 테스트 목업 함수",
            " * [참고] https://jestjs.io/docs/jest-object",
            " * [참고] https://jestjs.io/docs/mock-function-api",
            " * - jest.fn(목업함수)             : 신규 목업 함수를 생성하여 반환한다",
            " * - jest.spyOn(파일명, 함수명)    : 특정 파일의 함수를 복사해 Jest 목업 함수로 반환한다",
            " * - 목업함수.mockReturnValue(값)  : 목업함수 결과값을 대체한다",
            " * - 목업함수.mockResolvedValue(값): 비동기 목업함수 resolve 결과값을 대체한다",
            " * - 목업함수.mockRejectedValue(값): 비동기 목업함수 reject 결과값을 대체한다",
            " * ",
            " * 컴포넌트 테스트 함수",
            " *  - mount(컴포넌트, { 옵션 })       : 컴포넌트를 연결하여 wrapper 객체 반환한다",
            " *  - shallowMount(컴포넌트, { 옵션 }): 자식을 제외한 대상 컴포넌트만 연결하여 wrapper 객체 반환한다",
            " *      mount 옵션",
            " *          - shallow: boolean              : 얕은 복사 여부",
            " *          - attrs: { 속성 }               : 속성을 설정한다",
            " *          - data() { return { 데이터 } }  : 데이터를 설정한다",
            " *          - props: { 데이터 }             : 상속 데이터를 설정한다",
            " *          - global: {",
            " *                  components: { 컴포넌트 }: 구성 컴포넌트를 등록한다",
            " *                  provide   : { 데이터 }  : 주입할 데이터를 설정한다",
            " *                  directives: { 조건 }    : 등록된 조건을 설정한다(v-if 대신 v-조건)",
            " *                  plugins   : [ 플러그인 ]: 플러그인을 설치한다",
            " *                  mixins    : [ 믹스인 ]  : 믹스인을 등록한다",
            " *                  mocks     : { 속성 }    : store, router 속성의 모의 등록한다",
            " *                  stubs     : [ 컴포넌트 ]: 컴포넌트를 모의 등록한다",
            " *              }",
            " *  - wrapper",
            " *      - wrapper 속성",
            " *          - wrapper.vm : 컴포넌트 내 this. Vue 인스턴스.",
            " *      - wrapper 메소드",
            " *          - wrapper.exists()                 : 요소가 존재하는지 여부 반환",
            " *          - wrapper.find(객체)               : 요소를 찾아서 반환. 찾을 수 없으면 ErrorWrapper를 반환",
            " *          - wrapper.html()                   : HTML을 반환",
            " *          - wrapper.attributes(속성명)       : 속성을 반환",
            " *          - await wrapper.setData({ 데이터 }): 반응성을 유지한 채 데이터 갱신. 비동기로 동작한다",
            " *          - wrapper.unmount()                : 컴포넌트 연결 해제",
            "*/",
            "import { shallowMount } from '@vue/test-utils'",
            "import store from '~/store'",
            "import router from '~/routes'",
            "import ${1:컴포넌트} from '~/components/$2'",
            "",
            "describe('components/$2.vue', () => {",
            "    // 동일한 테스트 고유 환경 세팅",
            "    let wrapper",
            "    beforeAll (() => {})",
            "    afterAll  (() => {",
            "        wrapper.unmount()",
            "    })",
            "    beforeEach(async () => {",
            "        // 관련 없는 실행 함수에 모의 함수 세팅",
            "        $3 = jest.fn()",
            "        $3 = jest.spyOn($1, '$3').mockReturnValue($4)",
            "",
            "        // 접속 주소 세팅",
            "        router.push('$5')",
            "        await router.isReady() // 라우터 대기",
            "",
            "        wrapper = shallowMount($1, {",
            "            global: {",
            "                plugins: [ store, router ],",
            "                stubs: ['FontAwesomeIcon'],",
            "            }",
            "        })",
            "    })",
            "    afterEach (() => {})",
            "",
            "    test('$6', () => {",
            "        expect(wrapper.vm.$7).toBe($8)",
            "        expect(wrapper.find($9).$7).not.toEqual($8)",
            "    })",
            "})",
        ],
    },
    "Cypress E2E test code": {
        "prefix"     : "cypress",
        "description": "Cypress 테스트 코드 템플릿",
        "body"       : [
            "/** NOTE: E2E 테스트 파일",
            " * - 유저의 사용 시나리오별 테스트 파일을 작성한다.",
            " * - 터미널에서 package.json 에 명시한 테스트 실행 명령어 입력 시 테스트가 실행된다",
            " * ",
            " * 테스트 전역 함수",
            " * [참고] https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Writing-tests",
            " * - describe('테스트 그룹명', 옵션, 함수) : 테스트 함수들 그룹핑",
            " * - it('테스트 명', 옵션, 함수)           : 테스트 함수. 타임아웃의 기본 값은 5초 이다",
            " *      - it.only(...) : 해당 함수만 테스트",
            " *      - it.skip(...) : 해당 함수를 제외하고 테스트",
            " * - after(함수)      : 그룹 내 모든 테스트 함수들 시작 전 실행되는 함수",
            " * - afterEach(함수)  : 그룹 내 각각의 테스트 함수 시작 전 실행되는 함수",
            " * - before(함수)     : 그룹 내 모든 테스트 함수들 종료 후 실행되는 함수",
            " * - beforeEach(함수) : 그룹 내 각각의 테스트 함수 종료 후 실행되는 함수",
            " * ",
            " * 선택",
            " * [참고] https://docs.cypress.io/api/table-of-contents#Queries",
            " * - visit(값)   : 작성한 주소로 접근한다",
            " * - get(값)     : 선택자와 일치하는 요소를 가져온다",
            " * - contains(값): 텍스트 내용으로 요소를 가져온다",
            " * ",
            " * 행위",
            " * [참고] https://docs.cypress.io/api/table-of-contents#Actions",
            " * - type(값)        : input 요소에 값을 입력한다",
            " * - select(값)      : value 가 일치하는 option 요소를 선택한다",
            " * - check()         : 체크박스나 라디오 요소를 선택한다",
            " * - uncheck()       : 체크박스의 선택을 해제한다",
            " * - wait(ms)        : 입력된 밀리세컨드 만큼 기다린다",
            " * - click()         :클릭한다. 폼 제출 후 리로드",
            " * - trigger('click'): 클릭한다. 폼 제출 후 리로드 안함",
            " * ",
            " * 주장",
            " * [참고] https://docs.cypress.io/guides/references/assertions",
            " * - 대상.should('주장', 값)",
            " * - expect(대상).주장(값)",
            " *      주장 체이너",
            " *      - .not",
            " *      - .to.be.주장        : 원시형 데이터의 동일 여부 비교",
            " *      - .to.equal(값)      : 원시형 데이터의 동일 여부 비교",
            " *      - .eq(값)            : 원시형 데이터의 동일 여부 비교",
            " *      - .to.deep.equal(값) : 참조형 데이터의 동일 여부 비교",
            " *      - .include(값)       : 포함 여부 확인",
            "*/",
            "/** NOTE: ${1:시나리오 명}",
            " * ",
            " * [시나리오]",
            " * $2",
            "*/",
            "",
            "describe('${1:시나리오 명}', { testIsolation: ${3:false} }, () => {",
            "    before (() => {})",
            "    after  (() => {})",
            "    beforeEach(() => {})",
            "    afterEach (() => {})",
            "",
            "    it('$2', () => {",
            "        cy.visit('${4:/}')",
            "    })",
            "})",
        ],
    },
}